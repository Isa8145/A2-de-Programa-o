import pandas as pd
import streamlit as st

def carregar_dados():
    try:
        df = pd.read_csv('dogs.csv', encoding='utf-8')
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {e}")
        st.stop()

    if 'Nome' not in df.columns:
        st.error("Erro: coluna 'Nome' n√£o encontrada no CSV.")
        st.stop()

    df.set_index('Nome', inplace=True)
    return df.to_dict(orient='index')

def quiz():
    st.title("üê∂ Quiz: Qual √© a ra√ßa de cachorro ideal para voc√™?")
    st.write("Responda √†s perguntas abaixo e descubra a ra√ßa de cachorro que mais combina com voc√™!")

    respostas = {
        'porte': st.selectbox("Porte do cachorro:", ["Pequeno", "Pequeno-M√©dio", "M√©dio", "Grande"]),
        'tipo': st.selectbox("Tipo de cachorro:", ["Ca√ßa", "Trabalhador", "Terrier", "Pastor", "Esportista", "N√£o esportista", "Standart", "Toy"]),
        'amigavel': st.slider("N√≠vel de amigabilidade:", 1, 5, 3),
        'treinamento': st.slider("Import√¢ncia do treinamento:", 1, 5, 3),
        'tosa': st.selectbox("Necessidade de tosa:", ["Pequena", "M√©dia", "Grande", "Muito grande"]),
        'criancas': st.radio("Bom com crian√ßas:", ["Sim", "N√£o", "Sim, mesmo que precise treinar"]),
        'inteligencia': st.slider("N√≠vel de intelig√™ncia:", 1, 5, 3),
        'pelo': st.selectbox("Processo de troca de pelo:", ["Pequeno", "M√©dio", "Grande", "Muito grande"])
    }

    if st.button("üîç Descobrir minha ra√ßa ideal"):
        racas = carregar_dados()
        melhor_raca = None
        melhor_pontos = -1

        for nome_raca, dados in racas.items():
            pontos = 0

            if 'Porte' in dados and dados['Porte'].strip().lower() == respostas['porte'].strip().lower():
                pontos += 2
            if 'Tipo' in dados and dados['Tipo'].strip().lower() == respostas['tipo'].strip().lower():
                pontos += 1
            if 'Amigavel (1-10)' in dados and abs(dados['Amigavel (1-10)'] - respostas['amigavel']) <= 1:
                pontos += 1
            if 'Dificuldade de Treino (1-10)' in dados and dados['Dificuldade de Treino (1-10)'] >= respostas['treinamento']:
                pontos += 1
            if 'Necessidade de Tosa' in dados and dados['Necessidade de Tosa'].strip().lower() == respostas['tosa'].strip().lower():
                pontos += 2
            if 'Bom com Crian√ßas' in dados:
                crianca_ok = (
                    (respostas['criancas'] == 'Sim' and dados['Bom com Crian√ßas'] == 'Sim') or
                    (respostas['criancas'] == 'Sim, mesmo que precise treinar' and dados['Bom com Crian√ßas'] in ['Sim', 'Caso treinado'])
                )
                if crianca_ok:
                    pontos += 2
            if 'Intelig√™ncia (1-10)' in dados and dados['Intelig√™ncia (1-10)'] >= respostas['inteligencia']:
                pontos += 1
            if 'N√≠vel de Queda de Pelo' in dados and dados['N√≠vel de Queda de Pelo'].strip().lower() == respostas['pelo'].strip().lower():
                pontos += 1

            if pontos > melhor_pontos:
                melhor_pontos = pontos
                melhor_raca = nome_raca

        if melhor_raca:
            st.success(f"‚ú® A ra√ßa que mais combina com voc√™ √©: **{melhor_raca.upper()}** ({melhor_pontos}/10 pontos)")
            st.subheader("üêæ Caracter√≠sticas da ra√ßa:")
            for chave, valor in racas[melhor_raca].items():
                st.write(f"- **{chave}**: {valor}")
            link = f"https://pt.wikipedia.org/wiki/{melhor_raca.replace(' ', '_')}"
            st.markdown(f"[Saiba mais sobre {melhor_raca}]({link})")
        else:
            st.warning("N√£o conseguimos identificar uma ra√ßa ideal com base nas suas respostas. Tente novamente.")

# Executar o quiz
quiz()
